diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 0000000..61dd057
Binary files /dev/null and b/.DS_Store differ
diff --git a/.eslintrc.json b/.eslintrc.json
index 02509e2..0c956cf 100644
--- a/.eslintrc.json
+++ b/.eslintrc.json
@@ -7,9 +7,16 @@
     },
     "parserOptions": {
         "ecmaFeatures": {
-            "jsx": true
+            "jsx": true,
+            "arrowFunctions": true,
+            "classes": true,
+            "modules": true,
+            "spread": true,
+            "destructuring": true,
+            "templateStrings": true
         },
-        "sourceType": "module"
+        "sourceType": "module",
+        "ecmaVersion": 2018
     },
     "rules": {
         "no-const-assign": "warn",
diff --git a/.vscode/launch.json b/.vscode/launch.json
index 8314737..952881e 100644
--- a/.vscode/launch.json
+++ b/.vscode/launch.json
@@ -3,7 +3,7 @@
 // Hover to view descriptions of existing attributes.
 // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
 {
-	"version": "0.2.0",
+    "version": "0.2.0",
     "configurations": [
         {
             "name": "Extension",
diff --git a/extension.js b/extension.js
deleted file mode 100644
index f02a484..0000000
--- a/extension.js
+++ /dev/null
@@ -1,30 +0,0 @@
-// The module 'vscode' contains the VS Code extensibility API
-// Import the module and reference it with the alias vscode in your code below
-const vscode = require('vscode');
-
-// this method is called when your extension is activated
-// your extension is activated the very first time the command is executed
-function activate(context) {
-
-    // Use the console to output diagnostic information (console.log) and errors (console.error)
-    // This line of code will only be executed once when your extension is activated
-    console.log('Congratulations, your extension "baba-flow" is now active!');
-
-    // The command has been defined in the package.json file
-    // Now provide the implementation of the command with  registerCommand
-    // The commandId parameter must match the command field in package.json
-    let disposable = vscode.commands.registerCommand('extension.sayHello', function () {
-        // The code you place here will be executed every time your command is executed
-
-        // Display a message box to the user
-        vscode.window.showInformationMessage('Hello World!');
-    });
-
-    context.subscriptions.push(disposable);
-}
-exports.activate = activate;
-
-// this method is called when your extension is deactivated
-function deactivate() {
-}
-exports.deactivate = deactivate;
\ No newline at end of file
diff --git a/jsconfig.json b/jsconfig.json
index e9ddb54..1f36c17 100644
--- a/jsconfig.json
+++ b/jsconfig.json
@@ -1,11 +1,10 @@
 {
     "compilerOptions": {
         "module": "commonjs",
-        "target": "es6",
-        "checkJs": true,  /* Typecheck .js files. */
-        "lib": [
-            "es6"
-        ]
+        "target": "es2018",
+        "checkJs": true, /* Typecheck .js files. */
+        "resolveJsonModule": true,
+        "alwaysStrict": true
     },
     "exclude": [
         "node_modules"
diff --git a/package.json b/package.json
index 224bacf..6866e5f 100644
--- a/package.json
+++ b/package.json
@@ -10,24 +10,75 @@
         "Other"
     ],
     "activationEvents": [
-        "onCommand:extension.sayHello"
+        "onCommand:baba-flow.gfInit",
+        "onCommand:baba-flow.gfFeatureStart",
+        "onCommand:baba-flow.gfFeatureFinish",
+        "onCommand:baba-flow.gfBugFixStart",
+        "onCommand:baba-flow.gfBugFixFinish",
+        "onCommand:baba-flow.gfReleaseStart",
+        "onCommand:baba-flow.gfReleaseFinish",
+        "onCommand:baba-flow.gfHotFixStart",
+        "onCommand:baba-flow.gfHotFixFinish",
+        "onCommand:baba-flow.gfSupportStart"
     ],
-    "main": "./extension",
+    "main": "./src/extension",
     "contributes": {
-        "commands": [{
-            "command": "extension.sayHello",
-            "title": "Hello World"
-        }]
+        "commands": [
+            {
+                "command": "baba-flow.gfInit",
+                "title": "Git Flow: Init"
+            },
+            {
+                "command": "baba-flow.gfFeatureStart",
+                "title": "Git Flow: Feature Start"
+            },
+            {
+                "command": "baba-flow.gfFeatureFinish",
+                "title": "Git Flow: Feature Finish"
+            },
+            {
+                "command": "baba-flow.gfBugFixStart",
+                "title": "Git Flow: Bug Fix Start"
+            },
+            {
+                "command": "baba-flow.gfBugFixFinish",
+                "title": "Git Flow: Bug Fix Finish"
+            },
+            {
+                "command": "baba-flow.gfReleaseStart",
+                "title": "Git Flow: Release Start"
+            },
+            {
+                "command": "baba-flow.gfReleaseFinish",
+                "title": "Git Flow: Release Finish"
+            },
+            {
+                "command": "baba-flow.gfHotFixStart",
+                "title": "Git Flow: Hot Fix Start"
+            },
+            {
+                "command": "baba-flow.gfHotFixFinish",
+                "title": "Git Flow: Hot Fix Finish"
+            },
+            {
+                "command": "baba-flow.gfSupportStart",
+                "title": "Git Flow: Support Start"
+            }
+        ]
     },
     "scripts": {
         "postinstall": "node ./node_modules/vscode/bin/install",
         "test": "node ./node_modules/vscode/bin/test"
     },
     "devDependencies": {
-        "typescript": "^3.1.4",
-        "vscode": "^1.1.25",
-        "eslint": "^4.11.0",
+        "@types/mocha": "^2.2.42",
         "@types/node": "^8.10.25",
-        "@types/mocha": "^2.2.42"
+        "eslint": "^4.11.0",
+        "expect": "^23.6.0",
+        "typescript": "^3.1.4",
+        "vscode": "^1.1.25"
+    },
+    "dependencies": {
+        "open": "^0.0.5"
     }
 }
\ No newline at end of file
diff --git a/src/extension.js b/src/extension.js
new file mode 100644
index 0000000..0e8f9f5
--- /dev/null
+++ b/src/extension.js
@@ -0,0 +1,11 @@
+const init = require('./init')
+require('./utils/prototypes')
+
+function activate(context) {
+    init(context)
+}
+exports.activate = activate;
+
+function deactivate() {
+}
+exports.deactivate = deactivate;
\ No newline at end of file
diff --git a/src/init.js b/src/init.js
new file mode 100644
index 0000000..0271d58
--- /dev/null
+++ b/src/init.js
@@ -0,0 +1,340 @@
+const vscode = require('vscode')
+const open = require('open')
+const util = require('util')
+const exec = util.promisify(require('child_process').exec)
+
+const checkIsCommandInstalled = require('./utils/checkIsCommandInstalled')
+const strings = require('./strings')
+const { isEmptyString } = require('./utils/isEmptyString')
+
+let outputChannel
+
+const init = (context) => {
+    let gfInit = vscode.commands.registerCommand('baba-flow.gfInit', async () => {
+        let master, develop, feature, bugfix, release, hotfix, support, tagPrefix, hookDir = ''
+        if (await checkGF()) {
+            let result = await showInputBox(strings.firstGFInitQuestion)
+            master = returnValue(result, 'master')
+            result = await showInputBox(strings.secondGFInitQuestion)
+            develop = returnValue(result, 'develop')
+            result = await showInputBox(strings.thirdGFInitQuestion)
+            feature = returnValue(result, 'feature/')
+            result = await showInputBox(strings.fourthGFInitQuestion)
+            bugfix = returnValue(result, 'bugfix/')
+            result = await showInputBox(strings.fifthGFInitQuestion)
+            release = returnValue(result, 'release/')
+            result = await showInputBox(strings.sixthGFInitQuestion)
+            hotfix = returnValue(result, 'hotfix/')
+            result = await showInputBox(strings.seventhGFInitQuestion)
+            support = returnValue(result, 'support/')
+            result = await showInputBox(strings.eighthGFInitQuestion)
+            tagPrefix = returnValue(result, '')
+            result = await showInputBox(`${strings.ninthGFInitQuestion} ${vscode.workspace.rootPath}/.git/hooks`)
+            hookDir = await returnValue(result, '')
+
+            let terminal = getTerminal()
+            terminal.sendText('git flow init')
+            terminal.onDidWriteData(data => {
+                if (data.includes('[master]') && !this.isMasterSent) {
+                    terminal.sendText(master)
+                    this.isMasterSent = true
+                } else if (data.includes('[develop]') && !this.isDevelopSent) {
+                    terminal.sendText(develop)
+                    this.isDevelopSent = true
+                } else if (data.includes('[feature/]') && !this.isFeatureSent) {
+                    terminal.sendText(feature)
+                    this.isFeatureSent = true
+                } else if (data.includes('[bugfix/]') && !this.isBugFixSent) {
+                    terminal.sendText(bugfix)
+                    this.isBugFixSent = true
+                } else if (data.includes('[release/]') && !this.isReleaseSent) {
+                    terminal.sendText(release)
+                    this.isReleaseSent = true
+                } else if (data.includes('[hotfix/]') && !this.isHotFixSent) {
+                    terminal.sendText(hotfix)
+                    this.isHotFixSent = true
+                } else if (data.includes('[support/]') && !this.isSupportSent) {
+                    terminal.sendText(support)
+                    this.isHotFixSent = true
+                } else if (data.includes('tag prefix') && !this.isTagPrefixSent) {
+                    terminal.sendText(tagPrefix)
+                    this.isTagPrefixSent = true
+                } else if (data.includes('/.git/hooks') && !this.isHookDirSent) {
+                    terminal.sendText(hookDir)
+                    this.isHookDirSent = true
+                    terminal.dispose()
+                }
+            })
+        }
+    });
+
+    let gfFeatureStart = vscode.commands.registerCommand('baba-flow.gfFeatureStart', () => {
+        handleBranchCreation(strings.feature)
+    })
+
+    let gfFeatureFinish = vscode.commands.registerCommand('baba-flow.gfFeatureFinish', () => {
+        handleBranchFinishing(strings.feature)
+    })
+
+    let gfBugFixStart = vscode.commands.registerCommand('baba-flow.gfBugFixStart', () => {
+        handleBranchCreation(strings.bugfix)
+    })
+
+    let gfBugFixFinish = vscode.commands.registerCommand('baba-flow.gfBugFixFinish', () => {
+        handleBranchFinishing(strings.bugfix)
+    })
+
+    let gfReleaseStart = vscode.commands.registerCommand('baba-flow.gfReleaseStart', async () => {
+        const releaseBranches = await listBranches(strings.release)
+        if (releaseBranches && releaseBranches.length > 0) {
+            const branchName = releaseBranches[0]
+            return showInformationMessage(strings.existingBranchError.format(strings.release, branchName))
+        }
+        handleBranchCreation(strings.release)
+    })
+
+    let gfReleaseFinish = vscode.commands.registerCommand('baba-flow.gfReleaseFinish', () => {
+        handleBranchFinishing(strings.release)
+    })
+
+    let gfHotFixStart = vscode.commands.registerCommand('baba-flow.gfHotFixStart', async () => {
+        const hotFixBranches = await listBranches(strings.hotfix)
+        if (hotFixBranches && hotFixBranches.length > 0) {
+            const branchName = hotFixBranches[0]
+            return showInformationMessage(strings.existingBranchError.format(strings.hotfix, branchName))
+        }
+        handleBranchCreation(strings.hotfix)
+    })
+
+    let gfHotFixFinish = vscode.commands.registerCommand('baba-flow.gfHotFixFinish', () => {
+        handleBranchFinishing(strings.hotfix)
+    })
+
+    let gfSupportStart = vscode.commands.registerCommand('baba-flow.gfSupportStart', async () => {
+        handleBranchCreation(strings.support)
+    })
+
+    context.subscriptions.push(gfInit)
+    context.subscriptions.push(gfFeatureStart)
+    context.subscriptions.push(gfFeatureFinish)
+    context.subscriptions.push(gfBugFixStart)
+    context.subscriptions.push(gfBugFixFinish)
+    context.subscriptions.push(gfReleaseStart)
+    context.subscriptions.push(gfReleaseFinish)
+    context.subscriptions.push(gfHotFixStart)
+    context.subscriptions.push(gfHotFixFinish)
+    context.subscriptions.push(gfSupportStart)
+}
+
+const checkGF = async () => {
+    let isLibraryInstalled = await checkIsCommandInstalled('git flow')
+    if (!isLibraryInstalled) {
+        showLibraryNotInstalledMessage()
+    }
+    return isLibraryInstalled
+}
+
+const showLibraryNotInstalledMessage = () => {
+    vscode.window.showErrorMessage(strings.libraryNotInstalled, strings.libraryInstallUrl)
+        .then(res => {
+            if (res) {
+                open(res)
+            }
+        })
+}
+
+const showInputBox = async (message) => {
+    let result = await vscode.window.showInputBox({
+        placeHolder: message,
+    })
+    return result
+}
+
+const returnValue = (value, defaultValue) => {
+    return isEmptyString(value) ? defaultValue : value
+}
+
+const showWarningMessage = (message) => {
+    vscode.window.showWarningMessage(message)
+}
+
+const showErrorMessage = (error) => {
+    vscode.window.showErrorMessage(error)
+}
+
+const showInformationMessage = (message) => {
+    vscode.window.showInformationMessage(message)
+}
+
+const checkHasBranch = async (branchTag, branchName) => {
+    const branches = await getGitFlowBranches(branchTag)
+    return branches.includes(branchName)
+}
+
+const getGitFlowBranches = async (branchTag) => {
+    const { error, stdout, stderr } = await exec(`git flow ${branchTag} list`, { cwd: vscode.workspace.rootPath })
+    if (error || stderr) {
+        return []
+    }
+    return stdout
+}
+
+const getUserBranches = async () => {
+    const { error, stdout, stderr } = await exec('git branch -a', { cwd: vscode.workspace.rootPath })
+    if (stdout) {
+        let branches = stdout.split('\n')
+        branches = branches.filter(branch => {
+            return branch !== ''
+        })
+        branches = branches.map(branch => {
+            return branch.trim().replace('*', '')
+        })
+        return branches
+    }
+
+    showErrorMessage(error || stderr)
+}
+
+const listBranches = async (branchTag) => {
+    let branches = await getGitFlowBranches(branchTag)
+    if (branches && branches.length > 0) {
+        let branchNames = branches.split('\n').filter(name => {
+            return name.trim() !== ""
+        })
+        branchNames = branchNames.map(name => {
+            return name.replace('*', '').trim()
+        })
+        return branchNames
+    }
+    return []
+}
+
+const getTerminal = () => {
+    return vscode.window.createTerminal('BABA-Flow')
+}
+
+const handleBranchCreation = async (branchTag) => {
+    const isGitFlowInstalled = await await checkGF()
+    if (isGitFlowInstalled) {
+        let branchName = await showInputBox(strings.branchStart.format(branchTag))
+        if (!branchName) return
+        if (isEmptyString(branchName)) {
+            return showWarningMessage(strings.branchNameEmptyWarning)
+        } else if (await checkHasBranch(branchTag, branchName)) {
+            return showErrorMessage(strings.branchNameExist.format(`${branchTag}/${branchName}`))
+        }
+
+        const branches = await getUserBranches()
+        const developBranch = await getDevelopBranch()
+        branches.sort(a => {
+            if (a === developBranch) {
+                return -1
+            }
+        })
+
+        let { label, quickPick } = await showQuickPickWithOptions(strings.optionalSelectedBaseBranch.format(developBranch), branches)
+        const basingBranch = label === '' ? developBranch : label.toString()
+        quickPick.hide()
+
+        try {
+            const { error, stdout, stderr } = await exec(`git flow ${branchTag} start ${branchName} ${basingBranch}`, {
+                cwd: vscode.workspace.rootPath
+            })
+            if (stdout) {
+                writeToOutput(stdout)
+                return showInformationMessage(strings.branchCreated.format(`${branchTag}/${branchName}`))
+            }
+            showErrorMessage(error || stderr)
+        } catch (error) {
+            writeToOutput(error, true)
+        }
+    }
+}
+
+const handleBranchFinishing = async (branchTag) => {
+    const isGitFlowInstalled = await await checkGF()
+    if (isGitFlowInstalled) {
+        const branches = await listBranches(branchTag)
+        if (Array.isArray(branches)) {
+            if (branches.length === 0) {
+                return showInformationMessage(strings.dontHaveBranch.format(branchTag))
+            }
+
+            let { label, quickPick } = await showQuickPickWithOptions(strings.selectBranch.format(branchTag), branches)
+            label = label.replace(`${branchTag}/`, '')
+            quickPick.hide()
+
+            if (label) {
+                const isTagMessageRequired = branchTag === strings.hotfix || branchTag === strings.release
+
+                let tagMessage
+                if (isTagMessageRequired) {
+                    tagMessage = await vscode.window.showInputBox({
+                        placeHolder: strings.finishTagMessage,
+                        validateInput: (value) => {
+                            if (value === '') {
+                                return strings.aTagMessageIsMandatory
+                            }
+                        }
+                    })
+                }
+
+                const extraCommands = isTagMessageRequired ? `-m ${tagMessage}` : ''
+
+                try {
+                    const { error, stdout, stderr } = await exec(`git flow ${branchTag} finish ${label} ${extraCommands}`, {
+                        cwd: vscode.workspace.rootPath
+                    })
+                    if (stdout) {
+                        writeToOutput(stdout)
+                        return showInformationMessage(strings.branchFinished.format(`${branchTag}/${label}`))
+                    } else if (error) {
+                        return writeToOutput(error, true)
+                    }
+                    showErrorMessage(stderr)
+                } catch (error) {
+                    writeToOutput(error, true)
+                }
+            }
+        }
+    }
+}
+
+const showQuickPickWithOptions = (placeholder, options) => {
+    let quickPick = vscode.window.createQuickPick()
+    quickPick.placeholder = placeholder
+    quickPick.items = getQuickPickOptionsFromList(options)
+    quickPick.show()
+    return new Promise((resolve) => {
+        quickPick.onDidChangeSelection(selection => {
+            resolve({ label: selection[0].label, quickPick })
+        })
+    })
+}
+
+const getQuickPickOptionsFromList = (quickPickItems) => {
+    return quickPickItems.map(label => {
+        return {
+            label: label.trim(),
+        }
+    })
+}
+
+const getDevelopBranch = async () => {
+    const { stdout } = await exec('git config --get gitflow.branch.develop', { cwd: vscode.workspace.rootPath })
+    if (stdout) {
+        return stdout
+    }
+}
+
+const writeToOutput = (message, showOutputChannel) => {
+    if (!outputChannel) {
+        outputChannel = vscode.window.createOutputChannel('BABA-Flow')
+    }
+    outputChannel.appendLine(message)
+    if (showOutputChannel) {
+        outputChannel.show()
+    }
+}
+
+module.exports = init
\ No newline at end of file
diff --git a/src/strings.js b/src/strings.js
new file mode 100644
index 0000000..bce1eed
--- /dev/null
+++ b/src/strings.js
@@ -0,0 +1,29 @@
+module.exports = {
+    libraryNotInstalled: `Git Flow library is not installed on your computer. Go to link and follow instructions to install it.`,
+    libraryInstallUrl: 'https://goo.gl/M2Ai1a',
+    firstGFInitQuestion: 'Branch name for production releases: [default is master]',
+    secondGFInitQuestion: 'Branch name for "next release" development: [default is develop]',
+    thirdGFInitQuestion: 'How to name your feature branches? [default is feature/]',
+    fourthGFInitQuestion: 'How to name your bugfix branches? [default is bugfix/]',
+    fifthGFInitQuestion: 'How to name your release branches? [default is release/]',
+    sixthGFInitQuestion: 'How to name your hotfix branches? [default is hotfix/]',
+    seventhGFInitQuestion: 'How to name your support branches? [default is support/]',
+    eighthGFInitQuestion: 'How to name your version tag prefix?',
+    ninthGFInitQuestion: 'Hooks and filters directory? default is',
+    branchStart: 'What is the new {0} branch name that you want to start?',
+    branchNameEmptyWarning: 'Branch name can not be an empty string.',
+    branchNameExist: "Fatal: Branch {0} already exists. Pick another name.",
+    branchCreated: `Branch '{0}' successfully created.`,
+    selectBranch: `Select '{0}' branch to finish.`,
+    branchFinished: 'Branch {0} successfully finished.',
+    dontHaveBranch: 'You do not have {0} branches.',
+    feature: 'feature',
+    bugfix: 'bugfix',
+    release: 'release',
+    hotfix: 'hotfix',
+    support: 'support',
+    existingBranchError: 'There is an existing {0} branch {1}. Finish that one first.',
+    optionalSelectedBaseBranch: 'Select one of your branches to basing it. (default is {0})',
+    finishTagMessage: 'Write a message for tag.',
+    aTagMessageIsMandatory: 'A tag message is mandatory.'
+}
\ No newline at end of file
diff --git a/src/utils/checkIsCommandInstalled.js b/src/utils/checkIsCommandInstalled.js
new file mode 100644
index 0000000..9297dd8
--- /dev/null
+++ b/src/utils/checkIsCommandInstalled.js
@@ -0,0 +1,14 @@
+const exec = require('child_process').exec
+
+const checkIsCommandInstalled = (command) => {
+    return new Promise((resolve) => {
+        exec(`command -v ${command}`, (error) => {
+            if (error && error.code === 1) {
+                resolve(false)
+            }
+            resolve(true)
+        })
+    })
+}
+
+module.exports = checkIsCommandInstalled
\ No newline at end of file
diff --git a/src/utils/isEmptyString.js b/src/utils/isEmptyString.js
new file mode 100644
index 0000000..321e133
--- /dev/null
+++ b/src/utils/isEmptyString.js
@@ -0,0 +1,3 @@
+module.exports.isEmptyString = (value) => {
+    return value === ''
+}
\ No newline at end of file
diff --git a/src/utils/prototypes.js b/src/utils/prototypes.js
new file mode 100644
index 0000000..2008662
--- /dev/null
+++ b/src/utils/prototypes.js
@@ -0,0 +1,11 @@
+if (!String.prototype.format) {
+    String.prototype.format = function () {
+        let args = arguments;
+        return this.replace(/{(\d+)}/g, function (match, number) {
+            return typeof args[number] != 'undefined'
+                ? args[number]
+                : match
+                ;
+        });
+    };
+}
\ No newline at end of file
diff --git a/test/checkIsCommandInstalled.test.js b/test/checkIsCommandInstalled.test.js
new file mode 100644
index 0000000..48f6073
--- /dev/null
+++ b/test/checkIsCommandInstalled.test.js
@@ -0,0 +1,11 @@
+const checkIsLibraryInstalled = require('./../src/utils/checkIsCommandInstalled')
+const assert = require('assert');
+
+suite('checkIsLibraryInstalled', () => {
+
+    test('should return false if library is not installed', async () => {
+        let result = await checkIsLibraryInstalled('hello')
+        // expect(result).toBeFalsy()
+    })
+
+})
\ No newline at end of file
diff --git a/yarn.lock b/yarn.lock
index 44b7a49..a5b6e96 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -2,6 +2,22 @@
 # yarn lockfile v1
 
 
+"@babel/code-frame@^7.0.0-beta.35":
+  version "7.0.0"
+  resolved "https://registry.yarnpkg.com/@babel/code-frame/-/code-frame-7.0.0.tgz#06e2ab19bdb535385559aabb5ba59729482800f8"
+  integrity sha512-OfC2uemaknXr87bdLUkWog7nYuliM9Ij5HUcajsVcMCpQrcLmtxRbVFTIqmcSkSeYRBFBRxs2FiUqFJDLdiebA==
+  dependencies:
+    "@babel/highlight" "^7.0.0"
+
+"@babel/highlight@^7.0.0":
+  version "7.0.0"
+  resolved "https://registry.yarnpkg.com/@babel/highlight/-/highlight-7.0.0.tgz#f710c38c8d458e6dd9a201afb637fcb781ce99e4"
+  integrity sha512-UFMC4ZeFC48Tpvj7C8UgLvtkaUuovQX+5xNWrsIoMG8o2z+XFKjKaN9iVmS84dPwVN00W4wPmqvYoZF3EGAsfw==
+  dependencies:
+    chalk "^2.0.0"
+    esutils "^2.0.2"
+    js-tokens "^4.0.0"
+
 "@types/mocha@^2.2.42":
   version "2.2.48"
   resolved "https://registry.yarnpkg.com/@types/mocha/-/mocha-2.2.48.tgz#3523b126a0b049482e1c3c11877460f76622ffab"
@@ -88,7 +104,7 @@ ansi-styles@^2.2.1:
   resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-2.2.1.tgz#b432dd3358b634cf75e1e4664368240533c1ddbe"
   integrity sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4=
 
-ansi-styles@^3.2.1:
+ansi-styles@^3.2.0, ansi-styles@^3.2.1:
   version "3.2.1"
   resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-3.2.1.tgz#41fbb20243e50b12be0f04b8dedbf07520ce841d"
   integrity sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==
@@ -122,6 +138,13 @@ arr-diff@^1.0.1:
     arr-flatten "^1.0.1"
     array-slice "^0.2.3"
 
+arr-diff@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/arr-diff/-/arr-diff-2.0.0.tgz#8f3b827f955a8bd669697e4a4256ac3ceae356cf"
+  integrity sha1-jzuCf5Vai9ZpaX5KQlasPOrjVs8=
+  dependencies:
+    arr-flatten "^1.0.1"
+
 arr-flatten@^1.0.1:
   version "1.1.0"
   resolved "https://registry.yarnpkg.com/arr-flatten/-/arr-flatten-1.1.0.tgz#36048bbff4e7b47e136644316c99669ea5ae91f1"
@@ -154,6 +177,11 @@ array-uniq@^1.0.1:
   resolved "https://registry.yarnpkg.com/array-uniq/-/array-uniq-1.0.3.tgz#af6ac877a25cc7f74e058894753858dfdb24fdb6"
   integrity sha1-r2rId6Jcx/dOBYiUdThY39sk/bY=
 
+array-unique@^0.2.1:
+  version "0.2.1"
+  resolved "https://registry.yarnpkg.com/array-unique/-/array-unique-0.2.1.tgz#a1d97ccafcbc2625cc70fadceb36a50c58b01a53"
+  integrity sha1-odl8yvy8JiXMcPrc6zalDFiwGlM=
+
 arrify@^1.0.0:
   version "1.0.1"
   resolved "https://registry.yarnpkg.com/arrify/-/arrify-1.0.1.tgz#898508da2226f380df904728456849c1501a4b0d"
@@ -222,6 +250,15 @@ brace-expansion@^1.1.7:
     balanced-match "^1.0.0"
     concat-map "0.0.1"
 
+braces@^1.8.2:
+  version "1.8.5"
+  resolved "https://registry.yarnpkg.com/braces/-/braces-1.8.5.tgz#ba77962e12dff969d6b76711e914b737857bf6a7"
+  integrity sha1-uneWLhLf+WnWt2cR6RS3N4V79qc=
+  dependencies:
+    expand-range "^1.8.1"
+    preserve "^0.2.0"
+    repeat-element "^1.1.2"
+
 browser-stdout@1.3.0:
   version "1.3.0"
   resolved "https://registry.yarnpkg.com/browser-stdout/-/browser-stdout-1.3.0.tgz#f351d32969d32fa5d7a5567154263d928ae3bd1f"
@@ -270,7 +307,7 @@ chalk@^1.1.3:
     strip-ansi "^3.0.0"
     supports-color "^2.0.0"
 
-chalk@^2.0.0, chalk@^2.1.0:
+chalk@^2.0.0, chalk@^2.0.1, chalk@^2.1.0:
   version "2.4.2"
   resolved "https://registry.yarnpkg.com/chalk/-/chalk-2.4.2.tgz#cd42541677a54333cf541a49108c1432b44c9424"
   integrity sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==
@@ -455,6 +492,11 @@ diff@3.3.1:
   resolved "https://registry.yarnpkg.com/diff/-/diff-3.3.1.tgz#aa8567a6eed03c531fc89d3f711cd0e5259dec75"
   integrity sha512-MKPHZDMB0o6yHyDryUOScqZibp914ksXwAMYMTHj6KO8UeKsRYNJD3oNCKjTqZon+V488P7N/HzXF8t7ZR95ww==
 
+diff@^3.2.0:
+  version "3.5.0"
+  resolved "https://registry.yarnpkg.com/diff/-/diff-3.5.0.tgz#800c0dd1e0a8bfbc95835c202ad220fe317e5a12"
+  integrity sha512-A46qtFgd+g7pDZinpnwiRJtxbC1hpgf0uzP3iG89scHk0AUC7A1TGxf5OiiOUv/JMZR8GOt8hL900hV0bOy5xA==
+
 doctrine@^2.1.0:
   version "2.1.0"
   resolved "https://registry.yarnpkg.com/doctrine/-/doctrine-2.1.0.tgz#5cd01fc101621b42c4cd7f5d1a66243716d3f39d"
@@ -617,6 +659,32 @@ event-stream@~3.3.4:
     stream-combiner "^0.2.2"
     through "^2.3.8"
 
+expand-brackets@^0.1.4:
+  version "0.1.5"
+  resolved "https://registry.yarnpkg.com/expand-brackets/-/expand-brackets-0.1.5.tgz#df07284e342a807cd733ac5af72411e581d1177b"
+  integrity sha1-3wcoTjQqgHzXM6xa9yQR5YHRF3s=
+  dependencies:
+    is-posix-bracket "^0.1.0"
+
+expand-range@^1.8.1:
+  version "1.8.2"
+  resolved "https://registry.yarnpkg.com/expand-range/-/expand-range-1.8.2.tgz#a299effd335fe2721ebae8e257ec79644fc85337"
+  integrity sha1-opnv/TNf4nIeuujiV+x5ZE/IUzc=
+  dependencies:
+    fill-range "^2.1.0"
+
+expect@^23.6.0:
+  version "23.6.0"
+  resolved "https://registry.yarnpkg.com/expect/-/expect-23.6.0.tgz#1e0c8d3ba9a581c87bd71fb9bc8862d443425f98"
+  integrity sha512-dgSoOHgmtn/aDGRVFWclQyPDKl2CQRq0hmIEoUAuQs/2rn2NcvCWcSCovm6BLeuB/7EZuLGu2QfnR+qRt5OM4w==
+  dependencies:
+    ansi-styles "^3.2.0"
+    jest-diff "^23.6.0"
+    jest-get-type "^22.1.0"
+    jest-matcher-utils "^23.6.0"
+    jest-message-util "^23.4.0"
+    jest-regex-util "^23.3.0"
+
 extend-shallow@^1.1.2:
   version "1.1.4"
   resolved "https://registry.yarnpkg.com/extend-shallow/-/extend-shallow-1.1.4.tgz#19d6bf94dfc09d76ba711f39b872d21ff4dd9071"
@@ -638,6 +706,13 @@ external-editor@^2.0.4:
     iconv-lite "^0.4.17"
     tmp "^0.0.33"
 
+extglob@^0.3.1:
+  version "0.3.2"
+  resolved "https://registry.yarnpkg.com/extglob/-/extglob-0.3.2.tgz#2e18ff3d2f49ab2765cec9023f011daa8d8349a1"
+  integrity sha1-Lhj/PS9JqydlzskCPwEdqo2DSaE=
+  dependencies:
+    is-extglob "^1.0.0"
+
 extsprintf@1.3.0:
   version "1.3.0"
   resolved "https://registry.yarnpkg.com/extsprintf/-/extsprintf-1.3.0.tgz#96918440e3041a7a414f8c52e3c574eb3c3e1e05"
@@ -690,6 +765,22 @@ file-entry-cache@^2.0.0:
     flat-cache "^1.2.1"
     object-assign "^4.0.1"
 
+filename-regex@^2.0.0:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/filename-regex/-/filename-regex-2.0.1.tgz#c1c4b9bee3e09725ddb106b75c1e301fe2f18b26"
+  integrity sha1-wcS5vuPglyXdsQa3XB4wH+LxiyY=
+
+fill-range@^2.1.0:
+  version "2.2.4"
+  resolved "https://registry.yarnpkg.com/fill-range/-/fill-range-2.2.4.tgz#eb1e773abb056dcd8df2bfdf6af59b8b3a936565"
+  integrity sha512-cnrcCbj01+j2gTG921VZPnHbjmdAf8oQV/iGeV2kZxGSyfYjjTyY79ErsK1WJWMpw6DaApEX72binqJE+/d+5Q==
+  dependencies:
+    is-number "^2.1.0"
+    isobject "^2.0.0"
+    randomatic "^3.0.0"
+    repeat-element "^1.1.2"
+    repeat-string "^1.5.2"
+
 flat-cache@^1.2.1:
   version "1.3.4"
   resolved "https://registry.yarnpkg.com/flat-cache/-/flat-cache-1.3.4.tgz#2c2ef77525cc2929007dfffa1dd314aa9c9dee6f"
@@ -708,6 +799,18 @@ flush-write-stream@^1.0.2:
     inherits "^2.0.1"
     readable-stream "^2.0.4"
 
+for-in@^1.0.1:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/for-in/-/for-in-1.0.2.tgz#81068d295a8142ec0ac726c6e2200c30fb6d5e80"
+  integrity sha1-gQaNKVqBQuwKxybG4iAMMPttXoA=
+
+for-own@^0.1.4:
+  version "0.1.5"
+  resolved "https://registry.yarnpkg.com/for-own/-/for-own-0.1.5.tgz#5265c681a4f294dabbf17c9509b6763aa84510ce"
+  integrity sha1-UmXGgaTylNq78XyVCbZ2OqhFEM4=
+  dependencies:
+    for-in "^1.0.1"
+
 forever-agent@~0.6.1:
   version "0.6.1"
   resolved "https://registry.yarnpkg.com/forever-agent/-/forever-agent-0.6.1.tgz#fbc71f0c41adeb37f96c577ad1ed42d8fdacca91"
@@ -767,6 +870,21 @@ getpass@^0.1.1:
   dependencies:
     assert-plus "^1.0.0"
 
+glob-base@^0.3.0:
+  version "0.3.0"
+  resolved "https://registry.yarnpkg.com/glob-base/-/glob-base-0.3.0.tgz#dbb164f6221b1c0b1ccf82aea328b497df0ea3c4"
+  integrity sha1-27Fk9iIbHAscz4Kuoyi0l98Oo8Q=
+  dependencies:
+    glob-parent "^2.0.0"
+    is-glob "^2.0.0"
+
+glob-parent@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/glob-parent/-/glob-parent-2.0.0.tgz#81383d72db054fcccf5336daa902f182f6edbb28"
+  integrity sha1-gTg9ctsFT8zPUzbaqQLxgvbtuyg=
+  dependencies:
+    is-glob "^2.0.0"
+
 glob-parent@^3.1.0:
   version "3.1.0"
   resolved "https://registry.yarnpkg.com/glob-parent/-/glob-parent-3.1.0.tgz#9e6af6299d8d3bd2bd40430832bd113df906c5ae"
@@ -1010,6 +1128,28 @@ is-buffer@^1.1.5:
   resolved "https://registry.yarnpkg.com/is-buffer/-/is-buffer-1.1.6.tgz#efaa2ea9daa0d7ab2ea13a97b2b8ad51fefbe8be"
   integrity sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w==
 
+is-dotfile@^1.0.0:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/is-dotfile/-/is-dotfile-1.0.3.tgz#a6a2f32ffd2dfb04f5ca25ecd0f6b83cf798a1e1"
+  integrity sha1-pqLzL/0t+wT1yiXs0Pa4PPeYoeE=
+
+is-equal-shallow@^0.1.3:
+  version "0.1.3"
+  resolved "https://registry.yarnpkg.com/is-equal-shallow/-/is-equal-shallow-0.1.3.tgz#2238098fc221de0bcfa5d9eac4c45d638aa1c534"
+  integrity sha1-IjgJj8Ih3gvPpdnqxMRdY4qhxTQ=
+  dependencies:
+    is-primitive "^2.0.0"
+
+is-extendable@^0.1.1:
+  version "0.1.1"
+  resolved "https://registry.yarnpkg.com/is-extendable/-/is-extendable-0.1.1.tgz#62b110e289a471418e3ec36a617d472e301dfc89"
+  integrity sha1-YrEQ4omkcUGOPsNqYX1HLjAd/Ik=
+
+is-extglob@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/is-extglob/-/is-extglob-1.0.0.tgz#ac468177c4943405a092fc8f29760c6ffc6206c0"
+  integrity sha1-rEaBd8SUNAWgkvyPKXYMb/xiBsA=
+
 is-extglob@^2.1.0:
   version "2.1.1"
   resolved "https://registry.yarnpkg.com/is-extglob/-/is-extglob-2.1.1.tgz#a88c02535791f02ed37c76a1b9ea9773c833f8c2"
@@ -1020,6 +1160,13 @@ is-fullwidth-code-point@^2.0.0:
   resolved "https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz#a3b30a5c4f199183167aaab93beefae3ddfb654f"
   integrity sha1-o7MKXE8ZkYMWeqq5O+764937ZU8=
 
+is-glob@^2.0.0, is-glob@^2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/is-glob/-/is-glob-2.0.1.tgz#d096f926a3ded5600f3fdfd91198cb0888c2d863"
+  integrity sha1-0Jb5JqPe1WAPP9/ZEZjLCIjC2GM=
+  dependencies:
+    is-extglob "^1.0.0"
+
 is-glob@^3.1.0:
   version "3.1.0"
   resolved "https://registry.yarnpkg.com/is-glob/-/is-glob-3.1.0.tgz#7ba5ae24217804ac70707b96922567486cc3e84a"
@@ -1032,11 +1179,33 @@ is-negated-glob@^1.0.0:
   resolved "https://registry.yarnpkg.com/is-negated-glob/-/is-negated-glob-1.0.0.tgz#6910bca5da8c95e784b5751b976cf5a10fee36d2"
   integrity sha1-aRC8pdqMleeEtXUbl2z1oQ/uNtI=
 
+is-number@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/is-number/-/is-number-2.1.0.tgz#01fcbbb393463a548f2f466cce16dece49db908f"
+  integrity sha1-Afy7s5NGOlSPL0ZszhbezknbkI8=
+  dependencies:
+    kind-of "^3.0.2"
+
+is-number@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/is-number/-/is-number-4.0.0.tgz#0026e37f5454d73e356dfe6564699867c6a7f0ff"
+  integrity sha512-rSklcAIlf1OmFdyAqbnWTLVelsQ58uvZ66S/ZyawjWqIviTWCjg2PzVGw8WUA+nNuPTqb4wgA+NszrJ+08LlgQ==
+
 is-obj@^1.0.0:
   version "1.0.1"
   resolved "https://registry.yarnpkg.com/is-obj/-/is-obj-1.0.1.tgz#3e4729ac1f5fde025cd7d83a896dab9f4f67db0f"
   integrity sha1-PkcprB9f3gJc19g6iW2rn09n2w8=
 
+is-posix-bracket@^0.1.0:
+  version "0.1.1"
+  resolved "https://registry.yarnpkg.com/is-posix-bracket/-/is-posix-bracket-0.1.1.tgz#3334dc79774368e92f016e6fbc0a88f5cd6e6bc4"
+  integrity sha1-MzTceXdDaOkvAW5vvAqI9c1ua8Q=
+
+is-primitive@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/is-primitive/-/is-primitive-2.0.0.tgz#207bab91638499c07b2adf240a41a87210034575"
+  integrity sha1-IHurkWOEmcB7Kt8kCkGochADRXU=
+
 is-promise@^2.1.0:
   version "2.1.0"
   resolved "https://registry.yarnpkg.com/is-promise/-/is-promise-2.1.0.tgz#79a2a9ece7f096e80f36d2b2f3bc16c1ff4bf3fa"
@@ -1091,7 +1260,7 @@ isarray@0.0.1:
   resolved "https://registry.yarnpkg.com/isarray/-/isarray-0.0.1.tgz#8a18acfca9a8f4177e09abfc6038939b05d1eedf"
   integrity sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8=
 
-isarray@~1.0.0:
+isarray@1.0.0, isarray@~1.0.0:
   version "1.0.0"
   resolved "https://registry.yarnpkg.com/isarray/-/isarray-1.0.0.tgz#bb935d48582cba168c06834957a54a3e07124f11"
   integrity sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=
@@ -1101,16 +1270,68 @@ isexe@^2.0.0:
   resolved "https://registry.yarnpkg.com/isexe/-/isexe-2.0.0.tgz#e8fbf374dc556ff8947a10dcb0572d633f2cfa10"
   integrity sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=
 
+isobject@^2.0.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/isobject/-/isobject-2.1.0.tgz#f065561096a3f1da2ef46272f815c840d87e0c89"
+  integrity sha1-8GVWEJaj8dou9GJy+BXIQNh+DIk=
+  dependencies:
+    isarray "1.0.0"
+
 isstream@~0.1.2:
   version "0.1.2"
   resolved "https://registry.yarnpkg.com/isstream/-/isstream-0.1.2.tgz#47e63f7af55afa6f92e1500e690eb8b8529c099a"
   integrity sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo=
 
+jest-diff@^23.6.0:
+  version "23.6.0"
+  resolved "https://registry.yarnpkg.com/jest-diff/-/jest-diff-23.6.0.tgz#1500f3f16e850bb3d71233408089be099f610c7d"
+  integrity sha512-Gz9l5Ov+X3aL5L37IT+8hoCUsof1CVYBb2QEkOupK64XyRR3h+uRpYIm97K7sY8diFxowR8pIGEdyfMKTixo3g==
+  dependencies:
+    chalk "^2.0.1"
+    diff "^3.2.0"
+    jest-get-type "^22.1.0"
+    pretty-format "^23.6.0"
+
+jest-get-type@^22.1.0:
+  version "22.4.3"
+  resolved "https://registry.yarnpkg.com/jest-get-type/-/jest-get-type-22.4.3.tgz#e3a8504d8479342dd4420236b322869f18900ce4"
+  integrity sha512-/jsz0Y+V29w1chdXVygEKSz2nBoHoYqNShPe+QgxSNjAuP1i8+k4LbQNrfoliKej0P45sivkSCh7yiD6ubHS3w==
+
+jest-matcher-utils@^23.6.0:
+  version "23.6.0"
+  resolved "https://registry.yarnpkg.com/jest-matcher-utils/-/jest-matcher-utils-23.6.0.tgz#726bcea0c5294261a7417afb6da3186b4b8cac80"
+  integrity sha512-rosyCHQfBcol4NsckTn01cdelzWLU9Cq7aaigDf8VwwpIRvWE/9zLgX2bON+FkEW69/0UuYslUe22SOdEf2nog==
+  dependencies:
+    chalk "^2.0.1"
+    jest-get-type "^22.1.0"
+    pretty-format "^23.6.0"
+
+jest-message-util@^23.4.0:
+  version "23.4.0"
+  resolved "https://registry.yarnpkg.com/jest-message-util/-/jest-message-util-23.4.0.tgz#17610c50942349508d01a3d1e0bda2c079086a9f"
+  integrity sha1-F2EMUJQjSVCNAaPR4L2iwHkIap8=
+  dependencies:
+    "@babel/code-frame" "^7.0.0-beta.35"
+    chalk "^2.0.1"
+    micromatch "^2.3.11"
+    slash "^1.0.0"
+    stack-utils "^1.0.1"
+
+jest-regex-util@^23.3.0:
+  version "23.3.0"
+  resolved "https://registry.yarnpkg.com/jest-regex-util/-/jest-regex-util-23.3.0.tgz#5f86729547c2785c4002ceaa8f849fe8ca471bc5"
+  integrity sha1-X4ZylUfCeFxAAs6qj4Sf6MpHG8U=
+
 js-tokens@^3.0.2:
   version "3.0.2"
   resolved "https://registry.yarnpkg.com/js-tokens/-/js-tokens-3.0.2.tgz#9866df395102130e38f7f996bceb65443209c25b"
   integrity sha1-mGbfOVECEw449/mWvOtlRDIJwls=
 
+js-tokens@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/js-tokens/-/js-tokens-4.0.0.tgz#19203fb59991df98e3a287050d4647cdeaf32499"
+  integrity sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==
+
 js-yaml@^3.9.1:
   version "3.12.1"
   resolved "https://registry.yarnpkg.com/js-yaml/-/js-yaml-3.12.1.tgz#295c8632a18a23e054cf5c9d3cecafe678167600"
@@ -1164,6 +1385,18 @@ kind-of@^1.1.0:
   resolved "https://registry.yarnpkg.com/kind-of/-/kind-of-1.1.0.tgz#140a3d2d41a36d2efcfa9377b62c24f8495a5c44"
   integrity sha1-FAo9LUGjbS78+pN3tiwk+ElaXEQ=
 
+kind-of@^3.0.2:
+  version "3.2.2"
+  resolved "https://registry.yarnpkg.com/kind-of/-/kind-of-3.2.2.tgz#31ea21a734bab9bbb0f32466d893aea51e4a3c64"
+  integrity sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=
+  dependencies:
+    is-buffer "^1.1.5"
+
+kind-of@^6.0.0:
+  version "6.0.2"
+  resolved "https://registry.yarnpkg.com/kind-of/-/kind-of-6.0.2.tgz#01146b36a6218e64e58f3a8d66de5d7fc6f6d051"
+  integrity sha512-s5kLOcnH0XqDO+FvuaLX8DDjZ18CGFk7VygH40QoKPUQhW4e2rvM0rwUq0t8IQDOwYSeLK01U90OjzBTme2QqA==
+
 lazystream@^1.0.0:
   version "1.0.0"
   resolved "https://registry.yarnpkg.com/lazystream/-/lazystream-1.0.0.tgz#f6995fe0f820392f61396be89462407bb77168e4"
@@ -1209,6 +1442,30 @@ map-stream@~0.1.0:
   resolved "https://registry.yarnpkg.com/map-stream/-/map-stream-0.1.0.tgz#e56aa94c4c8055a16404a0674b78f215f7c8e194"
   integrity sha1-5WqpTEyAVaFkBKBnS3jyFffI4ZQ=
 
+math-random@^1.0.1:
+  version "1.0.4"
+  resolved "https://registry.yarnpkg.com/math-random/-/math-random-1.0.4.tgz#5dd6943c938548267016d4e34f057583080c514c"
+  integrity sha512-rUxjysqif/BZQH2yhd5Aaq7vXMSx9NdEsQcyA07uEzIvxgI7zIr33gGsh+RU0/XjmQpCW7RsVof1vlkvQVCK5A==
+
+micromatch@^2.3.11:
+  version "2.3.11"
+  resolved "https://registry.yarnpkg.com/micromatch/-/micromatch-2.3.11.tgz#86677c97d1720b363431d04d0d15293bd38c1565"
+  integrity sha1-hmd8l9FyCzY0MdBNDRUpO9OMFWU=
+  dependencies:
+    arr-diff "^2.0.0"
+    array-unique "^0.2.1"
+    braces "^1.8.2"
+    expand-brackets "^0.1.4"
+    extglob "^0.3.1"
+    filename-regex "^2.0.0"
+    is-extglob "^1.0.0"
+    is-glob "^2.0.1"
+    kind-of "^3.0.2"
+    normalize-path "^2.0.1"
+    object.omit "^2.0.0"
+    parse-glob "^3.0.4"
+    regex-cache "^0.4.2"
+
 mime-db@~1.37.0:
   version "1.37.0"
   resolved "https://registry.yarnpkg.com/mime-db/-/mime-db-1.37.0.tgz#0b6a0ce6fdbe9576e25f1f2d2fde8830dc0ad0d8"
@@ -1299,7 +1556,7 @@ node.extend@^1.1.2:
     has "^1.0.3"
     is "^3.2.1"
 
-normalize-path@^2.1.1:
+normalize-path@^2.0.1, normalize-path@^2.1.1:
   version "2.1.1"
   resolved "https://registry.yarnpkg.com/normalize-path/-/normalize-path-2.1.1.tgz#1ab28b556e198363a8c1a6f7e6fa20137fe6aed9"
   integrity sha1-GrKLVW4Zg2Oowab35vogE3/mrtk=
@@ -1338,6 +1595,14 @@ object.assign@^4.0.4:
     has-symbols "^1.0.0"
     object-keys "^1.0.11"
 
+object.omit@^2.0.0:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/object.omit/-/object.omit-2.0.1.tgz#1a9c744829f39dbb858c76ca3579ae2a54ebd1fa"
+  integrity sha1-Gpx0SCnznbuFjHbKNXmuKlTr0fo=
+  dependencies:
+    for-own "^0.1.4"
+    is-extendable "^0.1.1"
+
 once@^1.3.0, once@^1.3.1, once@^1.3.2, once@^1.4.0:
   version "1.4.0"
   resolved "https://registry.yarnpkg.com/once/-/once-1.4.0.tgz#583b1aa775961d4b113ac17d9c50baef9dd76bd1"
@@ -1352,6 +1617,11 @@ onetime@^2.0.0:
   dependencies:
     mimic-fn "^1.0.0"
 
+open@^0.0.5:
+  version "0.0.5"
+  resolved "https://registry.yarnpkg.com/open/-/open-0.0.5.tgz#42c3e18ec95466b6bf0dc42f3a2945c3f0cad8fc"
+  integrity sha1-QsPhjslUZra/DcQvOilFw/DK2Pw=
+
 optionator@^0.8.2:
   version "0.8.2"
   resolved "https://registry.yarnpkg.com/optionator/-/optionator-0.8.2.tgz#364c5e409d3f4d6301d6c0b4c05bba50180aeb64"
@@ -1376,6 +1646,16 @@ os-tmpdir@~1.0.2:
   resolved "https://registry.yarnpkg.com/os-tmpdir/-/os-tmpdir-1.0.2.tgz#bbe67406c79aa85c5cfec766fe5734555dfa1274"
   integrity sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ=
 
+parse-glob@^3.0.4:
+  version "3.0.4"
+  resolved "https://registry.yarnpkg.com/parse-glob/-/parse-glob-3.0.4.tgz#b2c376cfb11f35513badd173ef0bb6e3a388391c"
+  integrity sha1-ssN2z7EfNVE7rdFz7wu246OIORw=
+  dependencies:
+    glob-base "^0.3.0"
+    is-dotfile "^1.0.0"
+    is-extglob "^1.0.0"
+    is-glob "^2.0.0"
+
 path-dirname@^1.0.0:
   version "1.0.2"
   resolved "https://registry.yarnpkg.com/path-dirname/-/path-dirname-1.0.2.tgz#cc33d24d525e099a5388c0336c6e32b9160609e0"
@@ -1429,6 +1709,19 @@ prelude-ls@~1.1.2:
   resolved "https://registry.yarnpkg.com/prelude-ls/-/prelude-ls-1.1.2.tgz#21932a549f5e52ffd9a827f570e04be62a97da54"
   integrity sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=
 
+preserve@^0.2.0:
+  version "0.2.0"
+  resolved "https://registry.yarnpkg.com/preserve/-/preserve-0.2.0.tgz#815ed1f6ebc65926f865b310c0713bcb3315ce4b"
+  integrity sha1-gV7R9uvGWSb4ZbMQwHE7yzMVzks=
+
+pretty-format@^23.6.0:
+  version "23.6.0"
+  resolved "https://registry.yarnpkg.com/pretty-format/-/pretty-format-23.6.0.tgz#5eaac8eeb6b33b987b7fe6097ea6a8a146ab5760"
+  integrity sha512-zf9NV1NSlDLDjycnwm6hpFATCGl/K1lt0R/GdkAK2O5LN/rwJoB+Mh93gGJjut4YbmecbfgLWVGSTCr0Ewvvbw==
+  dependencies:
+    ansi-regex "^3.0.0"
+    ansi-styles "^3.2.0"
+
 process-nextick-args@^2.0.0, process-nextick-args@~2.0.0:
   version "2.0.0"
   resolved "https://registry.yarnpkg.com/process-nextick-args/-/process-nextick-args-2.0.0.tgz#a37d732f4271b4ab1ad070d35508e8290788ffaa"
@@ -1493,6 +1786,15 @@ queue@^4.2.1:
   dependencies:
     inherits "~2.0.0"
 
+randomatic@^3.0.0:
+  version "3.1.1"
+  resolved "https://registry.yarnpkg.com/randomatic/-/randomatic-3.1.1.tgz#b776efc59375984e36c537b2f51a1f0aff0da1ed"
+  integrity sha512-TuDE5KxZ0J461RVjrJZCJc+J+zCkTb1MbH9AQUq68sMhOMcy9jLcb3BrZKgp9q9Ncltdg4QVqWrH02W2EFFVYw==
+  dependencies:
+    is-number "^4.0.0"
+    kind-of "^6.0.0"
+    math-random "^1.0.1"
+
 "readable-stream@>=1.0.33-1 <1.1.0-0":
   version "1.0.34"
   resolved "https://registry.yarnpkg.com/readable-stream/-/readable-stream-1.0.34.tgz#125820e34bc842d2f2aaafafe4c2916ee32c157c"
@@ -1516,6 +1818,13 @@ readable-stream@^2.0.0, readable-stream@^2.0.1, readable-stream@^2.0.2, readable
     string_decoder "~1.1.1"
     util-deprecate "~1.0.1"
 
+regex-cache@^0.4.2:
+  version "0.4.4"
+  resolved "https://registry.yarnpkg.com/regex-cache/-/regex-cache-0.4.4.tgz#75bdc58a2a1496cec48a12835bc54c8d562336dd"
+  integrity sha512-nVIZwtCjkC9YgvWkpM55B5rBhBYRZhAaJbgcFYXXsHnbZ9UZI9nnVWYZpBlCqv9ho2eZryPnWrZGsOdPwVWXWQ==
+  dependencies:
+    is-equal-shallow "^0.1.3"
+
 regexpp@^1.0.1:
   version "1.1.0"
   resolved "https://registry.yarnpkg.com/regexpp/-/regexpp-1.1.0.tgz#0e3516dd0b7904f413d2d4193dce4618c3a689ab"
@@ -1543,6 +1852,16 @@ remove-trailing-separator@^1.0.1:
   resolved "https://registry.yarnpkg.com/remove-trailing-separator/-/remove-trailing-separator-1.1.0.tgz#c24bce2a283adad5bc3f58e0d48249b92379d8ef"
   integrity sha1-wkvOKig62tW8P1jg1IJJuSN52O8=
 
+repeat-element@^1.1.2:
+  version "1.1.3"
+  resolved "https://registry.yarnpkg.com/repeat-element/-/repeat-element-1.1.3.tgz#782e0d825c0c5a3bb39731f84efee6b742e6b1ce"
+  integrity sha512-ahGq0ZnV5m5XtZLMb+vP76kcAM5nkLqk0lpqAuojSKGgQtn4eRi4ZZGm2olo2zKFH+sMsWaqOCW1dqAnOru72g==
+
+repeat-string@^1.5.2:
+  version "1.6.1"
+  resolved "https://registry.yarnpkg.com/repeat-string/-/repeat-string-1.6.1.tgz#8dcae470e1c88abc2d600fff4a776286da75e637"
+  integrity sha1-jcrkcOHIirwtYA//Sndihtp15jc=
+
 replace-ext@0.0.1:
   version "0.0.1"
   resolved "https://registry.yarnpkg.com/replace-ext/-/replace-ext-0.0.1.tgz#29bbd92078a739f0bcce2b4ee41e837953522924"
@@ -1670,6 +1989,11 @@ signal-exit@^3.0.2:
   resolved "https://registry.yarnpkg.com/signal-exit/-/signal-exit-3.0.2.tgz#b5fdc08f1287ea1178628e415e25132b73646c6d"
   integrity sha1-tf3AjxKH6hF4Yo5BXiUTK3NkbG0=
 
+slash@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/slash/-/slash-1.0.0.tgz#c41f2f6c39fc16d1cd17ad4b5d896114ae470d55"
+  integrity sha1-xB8vbDn8FtHNF61LXYlhFK5HDVU=
+
 slice-ansi@1.0.0:
   version "1.0.0"
   resolved "https://registry.yarnpkg.com/slice-ansi/-/slice-ansi-1.0.0.tgz#044f1a49d8842ff307aad6b505ed178bd950134d"
@@ -1724,6 +2048,11 @@ sshpk@^1.7.0:
     safer-buffer "^2.0.2"
     tweetnacl "~0.14.0"
 
+stack-utils@^1.0.1:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/stack-utils/-/stack-utils-1.0.2.tgz#33eba3897788558bebfc2db059dc158ec36cebb8"
+  integrity sha512-MTX+MeG5U994cazkjd/9KNAapsHnibjMLnfXodlkXw76JEea0UiNzrqidzo1emMwk7w5Qhc9jd4Bn9TBb1MFwA==
+
 stat-mode@^0.2.0:
   version "0.2.2"
   resolved "https://registry.yarnpkg.com/stat-mode/-/stat-mode-0.2.2.tgz#e6c80b623123d7d80cf132ce538f346289072502"
